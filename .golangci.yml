# This file contains all available configuration options
# with their default values.

# options for analysis running
run:
    # default concurrency is a available CPU number
    concurrency: 6

    # timeout for analysis, e.g. 30s, 5m, default is 1m
    timeout: 1m

    # exit code when at least one issue was found, default is 1
    issues-exit-code: 1

    # include test files or not, default is true
    tests: true

    # default is true. Enables skipping of directories:
    #   vendor$, third_party$, testdata$, examples$, Godeps$, builtin$
    skip-dirs-use-default: true
    modules-download-mode: mod
    # Allow multiple parallel golangci-lint instances running.
    # If false (default) - golangci-lint acquires file lock on start.
    allow-parallel-runners: false

# output configuration options
output:
    # colored-line-number|line-number|json|tab|checkstyle|code-climate|junit-xml|github-actions
    # default is "colored-line-number"
    format: colored-line-number

    # print lines of code with issue, default is true
    print-issued-lines: true

    # print linter name in the end of issue text, default is true
    print-linter-name: true

    # make issues output unique by line, default is true
    uniq-by-line: true

    # add a prefix to the output file references; default is no prefix
    path-prefix: ""

    # sorts results by: filepath, line and column
    sort-results: false

# all available settings of specific linters
linters-settings:
    cyclop:
        # the maximal code complexity to report
        max-complexity: 10
        # the maximal average package complexity. If it's higher than 0.0 (float) the check is enabled (default 0.0)
        package-average: 0.0
        # should ignore tests (default false)
        skip-tests: true

    errcheck:
        # report about not checking of errors in type assertions: `a := b.(MyStruct)`;
        # default is false: such cases aren't reported by default.
        check-type-assertions: true

        # report about assignment of errors to blank identifier: `num, _ := strconv.Atoi(numStr)`;
        # default is false: such cases aren't reported by default.
        check-blank: false

        # [deprecated] comma-separated list of pairs of the form pkg:regex
        # the regex is used to ignore names within pkg. (default "fmt:.*").
        # see https://github.com/kisielk/errcheck#the-deprecated-method for details
        ignore: fmt:.*,io/ioutil:^Read.*

        # list of functions to exclude from checking, where each entry is a single function to exclude.
        # see https://github.com/kisielk/errcheck#excluding-functions for details
        exclude-functions:
            - io/ioutil.ReadFile
            - io.Copy(*bytes.Buffer)
            - io.Copy(os.Stdout)

    errorlint:
        # Check whether fmt.Errorf uses the %w verb for formatting errors. See the readme for caveats
        errorf: true
        # Check for plain type assertions and type switches
        asserts: true
        # Check for plain error comparisons
        comparison: true

    forbidigo:
        forbid:
            - ^print.*$
            - 'fmt\.Print.*'
        exclude_godoc_examples: true

    funlen:
        lines: 60
        statements: 40

    gocognit:
        # minimal code complexity to report, 30 by default (but we recommend 10-20)
        min-complexity: 20

    goconst:
        # minimal length of string constant, 3 by default
        min-len: 3
        # minimum occurrences of constant string count to trigger issue, 3 by default
        min-occurrences: 3
        # ignore test files, false by default
        ignore-tests: false
        # look for existing constants matching the values, true by default
        match-constant: true
        # search also for duplicated numbers, false by default
        numbers: false
        # minimum value, only works with goconst.numbers, 3 by default
        min: 3
        # maximum value, only works with goconst.numbers, 3 by default
        max: 3
        # ignore when constant is not used as function argument, true by default
        ignore-calls: true

    # gocritic:
    #     # Which checks should be enabled; can't be combined with 'disabled-checks';
    #     # See https://go-critic.github.io/overview#checks-overview
    #     # To check which checks are enabled run `GL_DEBUG=gocritic golangci-lint run`
    #     # By default list of stable checks is used.
    #     enabled-checks:
    #         - nestingReduce
    #         - ruleguard
    #         - truncateCmp

    #     # Which checks should be disabled; can't be combined with 'enabled-checks'; default is empty
    #     # disabled-checks:

    #     # Enable multiple checks by tags, run `GL_DEBUG=gocritic golangci-lint run` to see all tags and checks.
    #     # Empty list by default. See https://github.com/go-critic/go-critic#usage -> section "Tags".
    #     enabled-tags:
    #         - performance
    #     # disabled-tags:
    #     #     - experimental

    #     # Settings passed to gocritic.
    #     # The settings key is the name of a supported gocritic checker.
    #     # The list of supported checkers can be find in https://go-critic.github.io/overview.
    #     settings:
    #         captLocal: # must be valid enabled check name
    #             # whether to restrict checker to params only (default true)
    #             paramsOnly: true
    #         elseif:
    #             # whether to skip balanced if-else pairs (default true)
    #             skipBalanced: true
    #         hugeParam:
    #             # size in bytes that makes the warning trigger (default 80)
    #             sizeThreshold: 80
    #         nestingReduce:
    #             # min number of statements inside a branch to trigger a warning (default 5)
    #             bodyWidth: 5
    #         rangeExprCopy:
    #             # size in bytes that makes the warning trigger (default 512)
    #             sizeThreshold: 512
    #             # whether to check test functions (default true)
    #             skipTestFuncs: true
    #         rangeValCopy:
    #             # size in bytes that makes the warning trigger (default 128)
    #             sizeThreshold: 128
    #             # whether to check test functions (default true)
    #             skipTestFuncs: true
    #         ruleguard:
    #             # Enable debug to identify which 'Where' condition was rejected.
    #             # The value of the parameter is the name of a function in a ruleguard file.
    #             #
    #             # When a rule is evaluated:
    #             # If:
    #             #   The Match() clause is accepted; and
    #             #   One of the conditions in the Where() clause is rejected,
    #             # Then:
    #             #   ruleguard prints the specific Where() condition that was rejected.
    #             #
    #             # The flag is passed to the ruleguard 'debug-group' argument.
    #             debug: "emptyDecl"
    #             # Deprecated, use 'failOn' param.
    #             # If set to true, identical to failOn='all', otherwise failOn=''
    #             failOnError: false
    #             # Determines the behavior when an error occurs while parsing ruleguard files.
    #             # If flag is not set, log error and skip rule files that contain an error.
    #             # If flag is set, the value must be a comma-separated list of error conditions.
    #             # - 'all':    fail on all errors.
    #             # - 'import': ruleguard rule imports a package that cannot be found.
    #             # - 'dsl':    gorule file does not comply with the ruleguard DSL.
    #             failOn: dsl
    #             # Comma-separated list of file paths containing ruleguard rules.
    #             # If a path is relative, it is relative to the directory where the golangci-lint command is executed.
    #             # The special '${configDir}' variable is substituted with the absolute directory containing the golangci config file.
    #             # Glob patterns such as 'rules-*.go' may be specified.
    #             rules: "${configDir}/ruleguard/rules-*.go,${configDir}/myrule1.go"
    #         # tooManyResultsChecker:
    #         # maximum number of results (default 5)
    #         # maxResults: 10
    #         truncateCmp:
    #             # whether to skip int/uint/uintptr types (default true)
    #             skipArchDependent: true
    #         underef:
    #             # whether to skip (*x).method() calls where x is a pointer receiver (default true)
    #             skipRecvDeref: true
    #         # unnamedResult:
    #         #     # whether to check exported functions
    #         #     checkExported: true

    gocyclo:
        # minimal code complexity to report, 30 by default (but we recommend 10-20)
        min-complexity: 20

    gofmt:
        # simplify code: gofmt with `-s` option, true by default
        simplify: false

    # goimports:
    #     # # put imports beginning with prefix after 3rd-party packages;
    #     # # it's a comma-separated list of prefixes
    #     # local-prefixes: github.com/chanced/triterra/

    gosimple:
        # Select the Go version to target. The default is '1.13'.
        go: "1.17"
        # https://staticcheck.io/docs/options#checks
        checks: ["all"]

    govet:
        # report about shadowed variables
        check-shadowing: true

    # depguard:
    #     list-type: blacklist
    #     include-go-root: false
    #     packages:
    #         - github.com/sirupsen/logrus
    #     packages-with-error-message:
    #         # specify an error message to output when a blacklisted package is used
    #         - github.com/sirupsen/logrus: "logging is allowed only by logutils.Log"

    ifshort:
        # Maximum length of variable declaration measured in number of lines, after which linter won't suggest using short syntax.
        # Has higher priority than max-decl-chars.
        max-decl-lines: 1
        # Maximum length of variable declaration measured in number of characters, after which linter won't suggest using short syntax.
        max-decl-chars: 30

    # importas:
    #     # if set to `true`, force to use alias.
    #     no-unaliased: true
    #     # List of aliases
    #     alias:
    #         # using `servingv1` alias for `knative.dev/serving/pkg/apis/serving/v1` package
    #         - pkg: knative.dev/serving/pkg/apis/serving/v1
    #           alias: servingv1
    #         # using `autoscalingv1alpha1` alias for `knative.dev/serving/pkg/apis/autoscaling/v1alpha1` package
    #         - pkg: knative.dev/serving/pkg/apis/autoscaling/v1alpha1
    #           alias: autoscalingv1alpha1
    #         # You can specify the package path by regular expression,
    #         # and alias by regular expression expansion syntax like below.
    #         # see https://github.com/julz/importas#use-regular-expression for details
    #         - pkg: knative.dev/serving/pkg/apis/(\w+)/(v[\w\d]+)
    #           alias: $1$2

    # ireturn:
    #     # ireturn allows using `allow` and `reject` settings at the same time.
    #     # Both settings are lists of the keywords and regular expressions matched to interface or package names.
    #     # keywords:
    #     # - `empty` for `interface{}`
    #     # - `error` for errors
    #     # - `stdlib` for standard library
    #     # - `anon` for anonymous interfaces

    #     # By default, it allows using errors, empty interfaces, anonymous interfaces,
    #     # and interfaces provided by the standard library.
    #     allow:
    #         - anon
    #         - error
    #         - empty
    #         - stdlib
    #         # You can specify idiomatic endings for interface
    #         - (or|er)$

    #     # Reject patterns
    #     reject:
    #         - github.com\/user\/package\/v4\.Type

    lll:
        # max line length, lines longer will be reported. Default is 120.
        # '\t' is counted as 1 character by default, and can be changed with the tab-width option
        line-length: 120
        # tab width in spaces. Default to 1.
        tab-width: 1

    makezero:
        # Allow only slices initialized with a length of zero. Default is false.
        always: false

    maligned:
        # print struct with more effective memory layout or not, false by default
        suggest-new: true

    misspell:
        # Correct spellings using locale preferences for US or UK.
        # Default is to use a neutral variety of English.
        # Setting locale to US will correct the British spelling of 'colour' to 'color'.
        locale: US
        ignore-words:
            - someword

    # nakedret:
    #     # make an issue if func has more lines of code than this setting and it has naked returns; default is 30
    #     max-func-lines: 30

    nestif:
        # minimal complexity of if statements to report, 5 by default
        min-complexity: 4

    nilnil:
        # By default, nilnil checks all returned types below.
        checked-types:
            - ptr
            - func
            - iface
            - map
            - chan

    nlreturn:
        # size of the block (including return statement that is still "OK")
        # so no return split required.
        block-size: 1

    nolintlint:
        # Disable to ensure that all nolint directives actually have an effect. Default is true.
        allow-unused: false
        # Disable to ensure that nolint directives don't have a leading space. Default is true.
        allow-leading-space: true
        # Exclude following linters from requiring an explanation.  Default is [].
        allow-no-explanation: []
        # Enable to require an explanation of nonzero length after each nolint directive. Default is false.
        require-explanation: true
        # Enable to require nolint directives to mention the specific linter being suppressed. Default is false.
        require-specific: true

    prealloc:
        # XXX: we don't recommend using this linter before doing performance profiling.
        # For most programs usage of prealloc will be a premature optimization.

        # Report preallocation suggestions only on simple loops that have no returns/breaks/continues/gotos in them.
        # True by default.
        simple: true
        range-loops: true # Report preallocation suggestions on range loops, true by default
        for-loops: false # Report preallocation suggestions on for loops, false by default

    promlinter:
        # Promlinter cannot infer all metrics name in static analysis.
        # Enable strict mode will also include the errors caused by failing to parse the args.
        strict: false
        # Please refer to https://github.com/yeya24/promlinter#usage for detailed usage.
        disabled-linters:
        #  - "Help"
        #  - "MetricUnits"
        #  - "Counter"
        #  - "HistogramSummaryReserved"
        #  - "MetricTypeInName"
        #  - "ReservedChars"
        #  - "CamelCase"
        #  - "lintUnitAbbreviations"

    predeclared:
        # comma-separated list of predeclared identifiers to not report on
        ignore: ""
        # include method names and field names (i.e., qualified names) in checks
        q: false

    rowserrcheck:
        packages:
            - github.com/jmoiron/sqlx

    revive:
        # see https://github.com/mgechev/revive#available-rules for details.
        ignore-generated-header: true
        severity: warning
        confidence: 0.8
        rules:
            - name: indent-error-flow
            - name: blank-imports
            - name: context-as-argument
            - name: context-keys-type
            - name: dot-imports
            - name: error-return
            - name: error-strings
            - name: error-naming
            - name: exported
            - name: if-return
            - name: increment-decrement
            - name: var-naming
            - name: var-declaration
            - name: package-comments
            - name: range
            - name: receiver-naming
            - name: time-naming
            - name: unexported-return
            - name: indent-error-flow
            - name: errorf
            - name: empty-block
            - name: superfluous-else
            - name: unused-parameter
            - name: unreachable-code
            - name: redefines-builtin-id

    # staticcheck:
    #     # Select the Go version to target. The default is '1.13'.
    #     go: "1.17"
    #     # https://staticcheck.io/docs/options#checks
    #     checks: ["all"]

    tenv:
        # The option `all` will run against whole test files (`_test.go`) regardless of method/function signatures.
        # By default, only methods that take `*testing.T`, `*testing.B`, and `testing.TB` as arguments are checked.
        all: false

    unparam:
        check-exported: false

    unused:
        # Select the Go version to target. The default is '1.13'.
        go: "1.17"

    # whitespace:
    #     # multi-if: false # Enforces newlines (or comments) after every multi-line if statement
    #     # multi-func: false # Enforces newlines (or comments) after every multi-line function signature

    # wrapcheck:
    #     # An array of strings that specify substrings of signatures to ignore.
    #     # If this set, it will override the default set of ignored signatures.
    #     # See https://github.com/tomarrell/wrapcheck#configuration for more information.
    #     ignoreSigs:
    #         - .Errorf(
    #         - errors.New(
    #         - errors.Unwrap(
    #         - .Wrap(
    #         - .Wrapf(
    #         - .WithMessage(
    #         - .WithMessagef(
    #         - .WithStack(
    #     ignorePackageGlobs:
    #         - encoding/*
    #         - github.com/pkg/*

    # wsl:
    #     # See https://github.com/bombsimon/wsl/blob/master/doc/configuration.md for
    #     # documentation of available settings. These are the defaults for
    #     # `golangci-lint`.
    #     allow-assign-and-anything: false
    #     allow-assign-and-call: true
    #     allow-cuddle-declarations: false
    #     allow-multiline-assign: true
    #     allow-separated-leading-comment: false
    #     allow-trailing-comment: false
    #     force-case-trailing-whitespace: 0
    #     force-err-cuddling: false
    #     force-short-decl-cuddling: false
    #     strict-append: true

    # The custom section can be used to define linter plugins to be loaded at runtime.
    # See README doc for more info.
    # custom:
    #     # Each custom linter should have a unique name.
    #     example:
    #         # The path to the plugin *.so. Can be absolute or local. Required for each custom linter
    #         path: /path/to/example.so
    #         # The description of the linter. Optional, just for documentation purposes.
    #         description: This is an example usage of a plugin linter.
    #         # Intended to point to the repo location of the linter. Optional, just for documentation purposes.
    #         original-url: github.com/golangci/example-linter

    # issues:

    # Exclude known linters from partially hard-vendored code,
    # which is impossible to exclude via "nolint" comments.
    # - path: internal/hmac/
    #   text: "weak cryptographic primitive"
    #   linters:
    #       - gosec

    # Exclude some staticcheck messages
    # - linters:
    #       - staticcheck
    #   text: "SA9003:"

    # Exclude lll issues for long lines with go:generate
    # - linters:
    #       - lll
    #   source: "^//go:generate "

    # Independently from option `exclude` we use default exclude patterns,
    # it can be disabled by this option. To list all
    # excluded by default patterns execute `golangci-lint run --help`.
    # Default value for this option is true.
    exclude-use-default: false

    # The default value is false. If set to true exclude and exclude-rules
    # regular expressions become case sensitive.
    # exclude-case-sensitive: false

    # The list of ids of default excludes to include or disable. By default it's empty.
    # include:
    #     - EXC0002 # disable excluding of issues about comments from golint

    # Maximum issues count per one linter. Set to 0 to disable. Default is 50.
    # max-issues-per-linter: 0

    # Maximum count of issues with the same text. Set to 0 to disable. Default is 3.
    # max-same-issues: 0

    # Show only new issues: if there are unstaged changes or untracked files,
    # only those changes are analyzed, else only changes in HEAD~ are analyzed.
    # It's a super-useful option for integration of golangci-lint into existing
    # large codebase. It's not practical to fix all existing issues at the moment
    # of integration: much better don't allow issues in new code.
    # Default is false.
    new: false

    # Show only new issues created after git revision `REV`
    # new-from-rev: REV

    # Show only new issues created in git patch with set file path.
    # new-from-patch: path/to/patch/file

    # Fix found issues (if it's supported by the linter)
    fix: true

linters:
    disable-all: true
    enable:
        - revive
        - errorlint
        - exhaustive
        - staticcheck
        - ineffassign
        - errcheck
        - varcheck
        - structcheck
        - typecheck
        - gocognit
        - goconst
        - gocritic
        - gocyclo
        - gofmt
        - goimports
        - gosimple
        - govet
        - ifshort
        # - importas
        # - lll
        - tenv
        - thelper
        - unused
        - unparam

issues:
    exclude-use-default: false
    exclude-case-sensitive: false
    max-issues-per-linter: 50
    new: false
    exclude-rules:
        # Exclude some linters from running on tests files.
        - path: _test\.go
          linters:
              - gocyclo
              - errcheck
              - dupl
              - gosec
